h1 Должен быть только один.
Заголовки должны идти по порядку (для корректной поисковой выдаче).
<br> - перенос строки
<hr> - разделительная линия
<ol> нумерованный список
<ul> ненумерованный список
<p> - параграф
<i> - курсив
<em> - визуально как курсив только типо придаёт логическую важность (типа программист хотел сказать что эта часть текста важна)
<b> - жирный
<strong> визуально как жирный только типо придаёт логическую важность
<mark> выделенный текст (по умолчанию жёлтым цветом)
<u> - подчёркнутый
<s> - зачёркнутый
<sub> выделить текст в нижний регистр (степень наоборот)
<sup> выделить текст в степень
<span> выделить текст для будующего изменения в css
<div> - блок

Семантические теги:
<!-- Семантические теги - наглядно показывают что именно эта секция делает. Также улучгаю сео оптимизацию сайта (сайт будет лучше ранжироваться поисковыми)  -->
<header></header> <!-- шапка сайта-->
<nav></nav> <!-- навигационное меню -->
<article></article> <!-- оформление записи в блоге -->
<section></section> <!-- секции на сайте -->
<aside></aside> <!-- боковая колонка с информацией -->
<main></main> <!-- основное содержание документа -->
<address></address> <!-- редназначен для хранения контактной информации автора (адрес, телефон, e-mail, ссылка на сайт и др.) и может включать в себя любые элементы HTML вроде ссылок, текста, выделений и т. д. Планируется, что поисковые системы будут анализировать содержимое этого элемента для сбора информации об авторах. -->
<footer></footer> <!-- задаёт «подвал» сайта или раздела веб-страницы, в нём может располагаться имя автора, дата документа, контактная и правовая информация. -->
<wbr> <!-- переносит строку если это необходимо -->
<time></time> <!-- Помечает текст внутри элемента <time> (от англ. time — время) как дата, время или оба значения. -->

 Одно и тоже свойство у нескольких селекторов:
 h1, h2 {
	text-align: center;
	color: red;;
}

Несколько классов у тега:
<span class="italic gg"></span>
Одинаковые свойства у italic и gg будут иметь приоритет у gg

Все элементы:
* {

}

box-sizing: border-box; - установка размера элемента с учётом всех марджинов и падингов и бордеров

блочные элементы (display: block;) - занимают всю ширину
строчные элементы (display: inline;) - занимают столько сколько необходимо. Для строчных элементов марджин можно задать только слева и справа. Строчным элементам нельзя задать ширину.

выравнивание блочных элементов по горизонтали:
margin: 0 auto;

position:
static - по умолчанию;
relative - с помощью атрибутов bottom, top, right, left можно позиционировать элемент на странице (У тега body по умолчанию задан position: relative);
absolute - с помощью атрибутов bottom, top, right, left можно позиционировать элемент на странице. Роботает только внутри блока (ближайшего родителя), у которого стоит position relative;
fixed - фиксация к определённому месту в независимости от сроллинга;
inherid - наследование position от своего родителя;

атрибут z-index - определяет положение элемента на переднем плане. Это свойство работает только для элементов, у которых значение position задано как absolute, fixed или relative. Если нужно вывести элемент на передний план перед элементом, у которого position: absolute, то z-index нужно задать отрицательное значение.

float - оптикание

vertical-align - выравнивание по вертикали. Работает только для строчных элементов.

Единицы измерения:
Относительные:
px - пиксели;
% - проценты (у родителя должен быть задан параметр, который задаётся в процентах у потомка);
em - в зависимости от размера шрифта текущего элемента;
rem - в зависимости от размера шрифта корневого элемента в документе;
vw - 1/100 ширины окна;
vh - 1/100 высоты окна;
Абсолютные:
in - Дюйм (1 дюйм равен 2,54 см)
cm - Сантиметр
mm - Миллиметр
pt - Пункт (1 пункт равен 1/72 дюйма)
pc - Пика (1 пика равна 12 пунктам)

Каскадность css селекторов:
https://idg.net.ua/blog/uchebnik-css/azy-css/kaskadnost
https://learn.javascript.ru/css-selectors

Flexbox:
justify-content - Это CSS свойство выравнивает элементы горизонтально и принимает следующие значения:
* flex-start: Элементы выравниваются по левой стороне контейнера.
* flex-end: Элементы выравниваются по правой стороне контейнера.
* center: Элементы выравниваются по центру контейнера.
* space-between: Элементы отображаются с одинаковыми отступами между ними.
* space-around: Элементы отображаются с одинаковыми отступами вокруг них.

align-items - Это CSS свойство выравнивает элементы вертикально и принимает следующие значения:
* flex-start: Элементы выравниваются по верхнему краю контейнера.
* flex-end: Элементы выравниваются по нижнему краю контейнера.
* center: Элементы выравниваются вертикально по центру контейнера.
* baseline: Элементы отображаются на базовой линии контейнера.
* stretch: Элементы растягиваются, чтоб заполнить контейнер.

flex-direction - Это CSS свойство задает направление, в котором будут расположены элементы в контейнере и принимает следующие значения:
* row: Элементы размещаются по направлению текста.
* row-reverse: Элементы отображаются в обратном порядке к направлению текста.
* column: Элементы распологаются сверху вниз.
* column-reverse: Элементы распологаются снизу вверх.

Заметь, что когда ты устанавливаешь направление в обратном порядке для ряда или колонки, начало (start) и конец (end) тоже меняются местами.

Заметь, когда в качестве направления выбрана колонка, то justify-content влияет на вертикальное выравнивание, а align-items на горизонтальное.

Иногда изменения порядка отображения элементов в контейнере недостаточно. В таких случаях мы можем применить свойство order для конкретных элементов. По умолчанию, значение этого свойства у элементов равно 0, но мы можем задать положительное или отрицательное целое число этому свойству.

Еще одно свойство, которое ты можешь применить к определенному элементу это align-self. Это свойство принимает те же значения, что и align-items.

flex-wrap - Это CSS свойство указывает, нужно ли чтоб элементы принудительно находились в одном ряду или автоматически переносились. Принимает следующие значения:
* nowrap: Размеры элементов устанавливаются автоматически, чтоб они поместились в один ряд.
* wrap: Элементы автоматически переносятся на новую строку.
* wrap-reverse: Элементы автоматически переносятся на новую строку, но строки расположены в обратном порядке.

Два свойства flex-direction и flex-wrap используются так часто вместе, что было создано свойство flex-flow для их комбинирования. Это свойство принимает значения двух этих свойств, разделеные пробелом.
Например, ты можешь использовать flex-flow: row wrap, чтоб элементы располагались в ряд и автоматически переносились на новую строку.

align-content - Это CSS свойство выравнивает ряды flex-контейнера внутри него (работает только, если элементы расположены больше чем в один ряд). Данное свойство принимает следующие значения:
* flex-start: Ряды группируются в верхней части контейнера.
* flex-end: Ряды группируются в нижней части контейнера.
* center: Ряды группируются вертикально по центру контейнера.
* space-between: Ряды отображаются с одинаковыми расстояниями между ними.
* space-around: Ряды отображаются с одинаковыми расстояниями вокруг них.
* stretch: Ряды растягиваются, чтоб заполнить контейнер равномерно.
https://flexboxfroggy.com/#ru - игра по Flexbox.